// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interface/order_repository.go

// Package mock__interface is a generated GoMock package.
package mock__interface

import (
	context "context"
	model "golang-basic/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// GetOrdersByIDs mocks base method.
func (m *MockOrderRepository) GetOrdersByIDs(ctx context.Context, id []int64) ([]model.Orders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByIDs", ctx, id)
	ret0, _ := ret[0].([]model.Orders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByIDs indicates an expected call of GetOrdersByIDs.
func (mr *MockOrderRepositoryMockRecorder) GetOrdersByIDs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByIDs", reflect.TypeOf((*MockOrderRepository)(nil).GetOrdersByIDs), ctx, id)
}

// Insert mocks base method.
func (m *MockOrderRepository) Insert(ctx context.Context, order model.Orders) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, order)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockOrderRepositoryMockRecorder) Insert(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockOrderRepository)(nil).Insert), ctx, order)
}

// UpdateOrderByID mocks base method.
func (m *MockOrderRepository) UpdateOrderByID(ctx context.Context, order model.Orders) (model.Orders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderByID", ctx, order)
	ret0, _ := ret[0].(model.Orders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderByID indicates an expected call of UpdateOrderByID.
func (mr *MockOrderRepositoryMockRecorder) UpdateOrderByID(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderByID", reflect.TypeOf((*MockOrderRepository)(nil).UpdateOrderByID), ctx, order)
}
